- // MIR for `<impl at $DIR/combine_clone_of_primitives.rs:6:10: 6:15>::clone` before InstCombine
+ // MIR for `<impl at $DIR/combine_clone_of_primitives.rs:6:10: 6:15>::clone` after InstCombine
  
  fn <impl at $DIR/combine_clone_of_primitives.rs:6:10: 6:15>::clone(_1: &MyThing<T>) -> MyThing<T> {
      debug self => _1;                    // in scope 0 at $DIR/combine_clone_of_primitives.rs:+0:10: +0:15
      let mut _0: MyThing<T>;              // return place in scope 0 at $DIR/combine_clone_of_primitives.rs:+0:10: +0:15
      let mut _2: &T;                      // in scope 0 at $DIR/combine_clone_of_primitives.rs:+0:10: +0:15
      let mut _3: T;                       // in scope 0 at $DIR/combine_clone_of_primitives.rs:+0:10: +0:15
      let mut _4: &u64;                    // in scope 0 at $DIR/combine_clone_of_primitives.rs:+0:10: +0:15
      let mut _5: u64;                     // in scope 0 at $DIR/combine_clone_of_primitives.rs:+0:10: +0:15
      let mut _6: &[f32; 3];               // in scope 0 at $DIR/combine_clone_of_primitives.rs:+0:10: +0:15
      let mut _7: [f32; 3];                // in scope 0 at $DIR/combine_clone_of_primitives.rs:+0:10: +0:15
  
      bb0: {
          StorageLive(_2);                 // scope 0 at $DIR/combine_clone_of_primitives.rs:+0:10: +0:15
          StorageLive(_3);                 // scope 0 at $DIR/combine_clone_of_primitives.rs:+0:10: +0:15
          _2 = &((*_1).0: T);              // scope 0 at $DIR/combine_clone_of_primitives.rs:+0:10: +0:15
          _3 = <T as Clone>::clone(move _2) -> bb1; // scope 0 at $DIR/combine_clone_of_primitives.rs:+0:10: +0:15
                                           // mir::Constant
                                           // + span: $DIR/combine_clone_of_primitives.rs:6:10: 6:15
                                           // + literal: Const { ty: for<'a> fn(&'a T) -> T {<T as Clone>::clone}, val: Value(<ZST>) }
      }
  
      bb1: {
          StorageDead(_2);                 // scope 0 at $DIR/combine_clone_of_primitives.rs:+0:10: +0:15
          StorageLive(_4);                 // scope 0 at $DIR/combine_clone_of_primitives.rs:+0:10: +0:15
          StorageLive(_5);                 // scope 0 at $DIR/combine_clone_of_primitives.rs:+0:10: +0:15
          _4 = &((*_1).1: u64);            // scope 0 at $DIR/combine_clone_of_primitives.rs:+0:10: +0:15
-         _5 = <u64 as Clone>::clone(move _4) -> [return: bb2, unwind: bb4]; // scope 0 at $DIR/combine_clone_of_primitives.rs:+0:10: +0:15
-                                          // mir::Constant
-                                          // + span: $DIR/combine_clone_of_primitives.rs:6:10: 6:15
-                                          // + literal: Const { ty: for<'a> fn(&'a u64) -> u64 {<u64 as Clone>::clone}, val: Value(<ZST>) }
+         _5 = (*_4);                      // scope 0 at $DIR/combine_clone_of_primitives.rs:+0:10: +0:15
+         goto -> bb2;                     // scope 0 at $DIR/combine_clone_of_primitives.rs:+0:10: +0:15
      }
  
      bb2: {
          StorageDead(_4);                 // scope 0 at $DIR/combine_clone_of_primitives.rs:+0:10: +0:15
          StorageLive(_6);                 // scope 0 at $DIR/combine_clone_of_primitives.rs:+0:10: +0:15
          StorageLive(_7);                 // scope 0 at $DIR/combine_clone_of_primitives.rs:+0:10: +0:15
          _6 = &((*_1).2: [f32; 3]);       // scope 0 at $DIR/combine_clone_of_primitives.rs:+0:10: +0:15
-         _7 = <[f32; 3] as Clone>::clone(move _6) -> [return: bb3, unwind: bb4]; // scope 0 at $DIR/combine_clone_of_primitives.rs:+0:10: +0:15
-                                          // mir::Constant
-                                          // + span: $DIR/combine_clone_of_primitives.rs:6:10: 6:15
-                                          // + literal: Const { ty: for<'a> fn(&'a [f32; 3]) -> [f32; 3] {<[f32; 3] as Clone>::clone}, val: Value(<ZST>) }
+         _7 = (*_6);                      // scope 0 at $DIR/combine_clone_of_primitives.rs:+0:10: +0:15
+         goto -> bb3;                     // scope 0 at $DIR/combine_clone_of_primitives.rs:+0:10: +0:15
      }
  
      bb3: {
          StorageDead(_6);                 // scope 0 at $DIR/combine_clone_of_primitives.rs:+0:10: +0:15
          Deinit(_0);                      // scope 0 at $DIR/combine_clone_of_primitives.rs:+0:10: +0:15
          (_0.0: T) = move _3;             // scope 0 at $DIR/combine_clone_of_primitives.rs:+0:10: +0:15
          (_0.1: u64) = move _5;           // scope 0 at $DIR/combine_clone_of_primitives.rs:+0:10: +0:15
          (_0.2: [f32; 3]) = move _7;      // scope 0 at $DIR/combine_clone_of_primitives.rs:+0:10: +0:15
          StorageDead(_3);                 // scope 0 at $DIR/combine_clone_of_primitives.rs:+0:10: +0:15
          StorageDead(_5);                 // scope 0 at $DIR/combine_clone_of_primitives.rs:+0:10: +0:15
          StorageDead(_7);                 // scope 0 at $DIR/combine_clone_of_primitives.rs:+0:10: +0:15
          return;                          // scope 0 at $DIR/combine_clone_of_primitives.rs:+0:10: +0:15
      }
  
      bb4 (cleanup): {
          drop(_3) -> bb5;                 // scope 0 at $DIR/combine_clone_of_primitives.rs:+0:10: +0:15
      }
  
      bb5 (cleanup): {
          resume;                          // scope 0 at $DIR/combine_clone_of_primitives.rs:+0:10: +0:15
      }
  }
  
